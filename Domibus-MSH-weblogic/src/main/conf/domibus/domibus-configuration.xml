<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2015 e-CODEX Project
  ~
  ~ Licensed under the EUPL, Version 1.1 or â€“ as soon they
  ~ will be approved by the European Commission - subsequent
  ~ versions of the EUPL (the "Licence");
  ~ You may not use this work except in compliance with the
  ~ Licence.
  ~ You may obtain a copy of the Licence at:
  ~ http://ec.europa.eu/idabc/eupl5
  ~ Unless required by applicable law or agreed to in
  ~ writing, software distributed under the Licence is
  ~ distributed on an "AS IS" basis,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
  ~ express or implied.
  ~ See the Licence for the specific language governing
  ~ permissions and limitations under the Licence.
  -->

<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util.xsd">


    <import resource="file:///${domibus.config.location}/domibus-security.xml"/>

    <!--TODO remove this; it is equivalent with <context:annotation-config /> which is already declared -->
    <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor" />

    <bean id="gatewayConfigurationValidator" class="eu.domibus.common.validators.GatewayConfigurationValidator"/>

    <!-- Internal configuration provider. Do not change unless you have special requirements (i.e. dynamic
    discovery injection of PModes)-->
    <bean id="pModeProvider"
          class="eu.domibus.common.dao.PModeDao"/>

    <!-- General domibus properties -->
    <util:properties id="domibusProperties">
        <!-- The suffix of the messageId generated by this instance of domibus.
        Schema is:  ${UUID}@${SUFFIX} -->
        <prop key="domibus.msh.messageid.suffix">domibus.eu</prop>
        <!-- Retry Worker execution interval as a cron expression -->
        <prop key="domibus.msh.retry.cron">0/5 * * * * ?</prop>
        <prop key="domibus.msh.pull.cron">0/20 * * * * ?</prop>
        <!-- Timeout tolerance for retry messages (in miliseconds). Scheduled retries that, due to any reason, were not performed within this period will be timeout -->
        <prop key="domibus.msh.retry.tolerance">10800000</prop>
        <!-- Should unrecoverable errors should be retried or not -->
        <prop key="domibus.dispatch.ebms.error.unrecoverable.retry">true</prop>
        <prop key="domibus.smlzone">acc.edelivery.tech.ec.europa.eu</prop>

        <prop key="domibus.backend.jmsInQueue">jms/domibus.backend.jms.inQueue</prop>
	    <prop key="domibus.backend.etrustexInQueue">jms/domibus.backend.etrustex.inQueue</prop>
        <prop key="domibus.deployment.clustered">false</prop>
        <!-- In case of clustered environment, uncomment and adjust the value
        <prop key="domibus.deployment.cluster.url">t3://localhost:7003,localhost:7004</prop> -->
        <prop key="messageFactoryClass">com.sun.xml.internal.messaging.saaj.soap.ver1_2.SOAPMessageFactory1_2Impl</prop>
        <prop key="domibus.certificate.validation.enabled">true</prop>
        <!-- regular expression used for identifying the internal queues in the Admin Page -->
        <prop key="domibus.jms.internalQueue.expression">.*domibus\.(internal|DLQ|backend\.jms|notification\.jms|notification\.webservice|notification\.kerkovi).*</prop>
        <prop key="domibus.jmx.user">jmsManager</prop>
        <prop key="domibus.jmx.password">jms_Manager1</prop>

        <!--Timeout values for communication between the access points -->
        <!--ConnectionTimeOut - Specifies the amount of time, in milliseconds, that the consumer will attempt to establish a connection before it times out. 0 is infinite.-->
        <prop key="domibus.dispatcher.connectionTimeout">240000</prop>
        <!--ReceiveTimeout - Specifies the amount of time, in milliseconds, that the consumer will wait for a response before it times out. 0 is infinite.-->
        <prop key="domibus.dispatcher.receiveTimeout">240000</prop>


        <!-- Uncomment the following line if you need to tweak the maximum downloaded messages to be deleted by the retention worker -->
        <!-- <prop key="message.retention.downloaded.max.delete">50</prop> -->
        <!-- Uncomment the following line if you need to tweak the maximum not-downloaded messages to be deleted by the retention worker -->
        <!-- <prop key="message.retention.not_downloaded.max.delete">50</prop> -->

        <!--Accepted Format for MessageId-->
        <prop key="domibus.sendMessage.messageIdPattern">^[\x20-\x7E]*$</prop>

        <!-- Whether to delete the message payload on send failure. Defaults to false (the admin could put the message back in the send queue) -->
        <prop key="domibus.sendMessage.failure.delete.payload">false</prop>

        <!--Maximum number of pending messages to be listed -->
        <prop key="domibus.listPendingMessages.maxCount">500</prop>

        <!--Timeout values for communication between the access points -->
        <!--ConnectionTimeOut - Specifies the amount of time, in milliseconds, that the consumer will attempt to establish a connection before it times out. 0 is infinite.-->
        <prop key="domibus.dispatcher.connectionTimeout">240000</prop>
        <!--ReceiveTimeout - Specifies the amount of time, in milliseconds, that the consumer will wait for a response before it times out. 0 is infinite.-->
        <prop key="domibus.dispatcher.receiveTimeout">240000</prop>

        <!-- Enable the proxy settings only if you use a proxy -->
        <!--
        <prop key="domibus.proxy.enabled">true</prop>
        <prop key="domibus.proxy.http.host">158.169.9.13</prop>
        <prop key="domibus.proxy.http.port">8012</prop>
        <prop key="domibus.proxy.user">username</prop>
        <prop key="domibus.proxy.password">password</prop>
        <prop key="domibus.proxy.nonProxyHosts">localhost|*.cec.eu.int</prop>
        -->

        <!-- To disable unsecureLogin, set this to false -->
        <!-- <prop key="domibus.auth.unsecureLoginAllowed">true</prop> -->

    </util:properties>


    <!-- Mimetypes listed in this map will not be compressed (in outgoing messages)
    even if compression is turned on for the given message. -->
    <util:list id="compressionBlacklist" value-type="java.lang.String">
        <value>application/vnd.etsi.asic-s+zip</value>
        <value>image/jpeg</value>
    </util:list>

    <!-- message sender that is being executed by the senderworker -->
    <!--    <bean id="messageSender" class="eu.domibus.ebms3.sender.MessageSender"/>-->

    <!-- quartz job for the  -->
    <bean id="retryWorkerJob"
          class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="eu.domibus.ebms3.sender.SendRetryWorker"/>
        <property name="durability" value="true"/>
    </bean>

    <bean id="retryWorkerTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="retryWorkerJob"/>
        <property name="cronExpression" value="${domibus.msh.retry.cron}"/>
    </bean>

    <bean id="pullRequestJob"
          class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="eu.domibus.ebms3.puller.MessagePullerJob"/>
        <property name="durability" value="true"/>
    </bean>

    <bean id="pullRequestTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="pullRequestJob"/>
        <property name="cronExpression" value="${domibus.msh.pull.cron}"/>
    </bean>

    <!-- customizable list of triggers to be executed by quartz -->
    <bean id="userdefinedTriggerList"
          class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <ref bean="retryWorkerTrigger"/>
                <ref bean="pullRequestTrigger"/>
            </list>
        </property>
    </bean>


</beans>