<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<databaseChangeLog xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd">

    <changeSet id="MySQL_Collation_Update_1554" author="ArunRaj" dbms="mysql">
        <sql dbms="mysql">
            SET FOREIGN_KEY_CHECKS=0;
            ALTER TABLE QRTZ_TRIGGERS CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE QRTZ_BLOB_TRIGGERS CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE QRTZ_CRON_TRIGGERS CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE QRTZ_JOB_DETAILS CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE QRTZ_SIMPLE_TRIGGERS CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE QRTZ_SIMPROP_TRIGGERS CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE QRTZ_CALENDARS CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE QRTZ_FIRED_TRIGGERS CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE QRTZ_LOCKS CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE QRTZ_PAUSED_TRIGGER_GRPS CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE QRTZ_SCHEDULER_STATE CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_ACTION CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_AGREEMENT CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_AUTHENTICATION_ENTRY CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_BACKEND_FILTER CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_BUSINESS_PROCESS CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_CONFIGURATION CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_ERROR CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_ERROR_HANDLING CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_ERROR_LOG CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_JOIN_PAYLOAD_PROFILE CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_JOIN_PROCESS_INIT_PARTY CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_JOIN_PROCESS_LEG CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_JOIN_PROCESS_RESP_PARTY CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_JOIN_PROPERTY_SET CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_LEG CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_LEG_TB_MPC CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_MEP CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_MEP_BINDING CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_MESSAGE_INFO CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_MESSAGE_LOG CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_MESSAGE_PROPERTY CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_MESSAGE_PROPERTY_SET CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_MESSAGING CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_MPC CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_PART_INFO CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_PARTY CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_PARTY_ID CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_PARTY_ID_TYPE CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_PARTY_IDENTIFIER CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_PAYLOAD CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_PAYLOAD_PROFILE CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_PROCESS CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_PROPERTY CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_RECEIPT CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_RECEIPT_DATA CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_RECEPTION_AWARENESS CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_RELIABILITY CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_ROLE CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_ROUTING_CRITERIA CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_SECURITY CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_SERVICE CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_SIGNAL_MESSAGE CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            ALTER TABLE TB_USER_MESSAGE CONVERT TO CHARACTER SET UTF8 COLLATE UTF8_BIN;
            SET FOREIGN_KEY_CHECKS=1;
        </sql>
    </changeSet>

    <changeSet id="Message Filter changes" author="Tiago Miguel">
        <sql dbms="mysql">
            DROP TABLE IF EXISTS TB_BACKEND_FILTER_BACKUP;
            DROP TABLE IF EXISTS TB_ROUTING_CRITERIA_BACKUP;
            DROP TABLE IF EXISTS TB_BACKEND_FILTER_MIGR2;
            DROP TABLE IF EXISTS TB_ROUTING_CRITERIA_MIGR;
            DROP TABLE IF EXISTS TB_BACKEND_FILTER_MIGR;

            CREATE TEMPORARY TABLE IF NOT EXISTS TB_BACKEND_FILTER_BACKUP AS (
            SELECT
            *
            FROM
            TB_BACKEND_FILTER
            );

            CREATE TEMPORARY TABLE IF NOT EXISTS TB_ROUTING_CRITERIA_BACKUP AS (
            SELECT
            *
            FROM
            TB_ROUTING_CRITERIA
            );

            CREATE TEMPORARY TABLE IF NOT EXISTS TB_BACKEND_FILTER_MIGR AS (
            SELECT
            @ROWNUM:=@ROWNUM + 1 AS ID_PK,
            BACKEND_NAME,
            @ROWNUM-1 AS PRIORITY,
            OLD_ID,
            OLD_PRIO,
            CRITERIA_OPERATOR
            FROM
            (
            SELECT
            TB_BACKEND_FILTER.ID_PK AS OLD_ID, BACKEND_NAME, TB_BACKEND_FILTER.CRITERIA_OPERATOR,TB_BACKEND_FILTER.PRIORITY, TB_ROUTING_CRITERIA.PRIORITY AS OLD_PRIO
            FROM
            TB_BACKEND_FILTER
            LEFT OUTER JOIN TB_ROUTING_CRITERIA ON TB_BACKEND_FILTER.ID_PK = TB_ROUTING_CRITERIA.FK_BACKEND_FILTER
            WHERE
            TB_BACKEND_FILTER.CRITERIA_OPERATOR='OR'
            UNION ALL
            SELECT
            DISTINCT TB_BACKEND_FILTER.ID_PK AS OLD_ID, BACKEND_NAME,TB_BACKEND_FILTER.CRITERIA_OPERATOR,TB_BACKEND_FILTER.PRIORITY, 0 AS OLD_PRIO
            FROM
            TB_BACKEND_FILTER
            LEFT OUTER JOIN TB_ROUTING_CRITERIA ON TB_BACKEND_FILTER.ID_PK = TB_ROUTING_CRITERIA.FK_BACKEND_FILTER
            WHERE
            TB_BACKEND_FILTER.CRITERIA_OPERATOR='AND'
            ORDER BY
            PRIORITY ASC, OLD_PRIO ASC
            ) P INNER JOIN (SELECT @ROWNUM := 0) R
            );

            CREATE TEMPORARY TABLE TB_BACKEND_FILTER_MIGR2 LIKE TB_BACKEND_FILTER_MIGR;
            INSERT INTO TB_BACKEND_FILTER_MIGR2 SELECT * FROM TB_BACKEND_FILTER_MIGR;

            CREATE TEMPORARY TABLE IF NOT EXISTS TB_ROUTING_CRITERIA_MIGR AS (
            SELECT
            ID_PK,
            EXPRESSION,
            NAME,
            FK_BACKEND_FILTER,
            PRIORITY
            FROM
            (
            SELECT
            RC.ID_PK AS ID_PK,
            RC.EXPRESSION AS EXPRESSION,
            RC.NAME AS NAME,
            MIGR.ID_PK AS FK_BACKEND_FILTER,
            0 AS PRIORITY
            FROM TB_ROUTING_CRITERIA RC, TB_BACKEND_FILTER_MIGR MIGR
            WHERE RC.PRIORITY = MIGR.OLD_PRIO AND RC.FK_BACKEND_FILTER = MIGR.OLD_ID AND MIGR.CRITERIA_OPERATOR = 'OR'
            UNION ALL
            SELECT
            RC.ID_PK AS ID_PK,
            RC.EXPRESSION AS EXPRESSION,
            RC.NAME AS NAME,
            MIGR2.ID_PK AS FK_BACKEND_FILTER,
            RC.PRIORITY AS PRIORITY
            FROM TB_ROUTING_CRITERIA RC, TB_BACKEND_FILTER_MIGR2 MIGR2
            WHERE RC.FK_BACKEND_FILTER = MIGR2.OLD_ID AND MIGR2.CRITERIA_OPERATOR = 'AND'
            ORDER BY ID_PK) P);

            SET FOREIGN_KEY_CHECKS = 0;

            TRUNCATE TABLE TB_ROUTING_CRITERIA;
            TRUNCATE TABLE TB_BACKEND_FILTER;

            ALTER TABLE TB_BACKEND_FILTER DROP COLUMN CRITERIA_OPERATOR;

            INSERT INTO TB_BACKEND_FILTER
            SELECT ID_PK, BACKEND_NAME, PRIORITY FROM TB_BACKEND_FILTER_MIGR;

            INSERT INTO TB_ROUTING_CRITERIA
            SELECT * FROM TB_ROUTING_CRITERIA_MIGR;

            SET FOREIGN_KEY_CHECKS = 1;
        </sql>
        <sql dbms="oracle">
            CREATE GLOBAL TEMPORARY TABLE TB_BACKEND_FILTER_BACKUP ON COMMIT PRESERVE ROWS AS (
            SELECT
            *
            FROM
            TB_BACKEND_FILTER
            );

            CREATE GLOBAL TEMPORARY TABLE TB_ROUTING_CRITERIA_BACKUP ON COMMIT PRESERVE ROWS AS (
            SELECT
            *
            FROM
            TB_ROUTING_CRITERIA
            );

            CREATE GLOBAL TEMPORARY TABLE TB_BACKEND_FILTER_MIGR
            ON COMMIT PRESERVE ROWS
            AS (
            SELECT
            ROWNUM AS ID_PK,
            BACKEND_NAME,
            ROWNUM-1 AS PRIORITY,
            OLD_ID,
            OLD_PRIO,
            CRITERIA_OPERATOR
            FROM
            (
            SELECT
            TB_BACKEND_FILTER.ID_PK AS OLD_ID, BACKEND_NAME, TB_BACKEND_FILTER.CRITERIA_OPERATOR,TB_BACKEND_FILTER.PRIORITY, TB_ROUTING_CRITERIA.PRIORITY AS OLD_PRIO
            FROM
            TB_BACKEND_FILTER
            LEFT OUTER JOIN TB_ROUTING_CRITERIA ON TB_BACKEND_FILTER.ID_PK = TB_ROUTING_CRITERIA.FK_BACKEND_FILTER
            WHERE
            TB_BACKEND_FILTER.CRITERIA_OPERATOR='OR'
            UNION ALL
            SELECT
            DISTINCT TB_BACKEND_FILTER.ID_PK AS OLD_ID, BACKEND_NAME,TB_BACKEND_FILTER.CRITERIA_OPERATOR,TB_BACKEND_FILTER.PRIORITY, 0 AS OLD_PRIO
            FROM
            TB_BACKEND_FILTER
            LEFT OUTER JOIN TB_ROUTING_CRITERIA ON TB_BACKEND_FILTER.ID_PK = TB_ROUTING_CRITERIA.FK_BACKEND_FILTER
            WHERE
            TB_BACKEND_FILTER.CRITERIA_OPERATOR='AND'
            ORDER BY
            PRIORITY ASC, OLD_PRIO ASC
            )
            );

            CREATE GLOBAL TEMPORARY TABLE TB_BACKEND_FILTER_MIGR2 ON COMMIT PRESERVE ROWS AS SELECT * FROM TB_BACKEND_FILTER_MIGR;

            CREATE GLOBAL TEMPORARY TABLE TB_ROUTING_CRITERIA_MIGR ON COMMIT PRESERVE ROWS AS (
            SELECT
            ID_PK,
            EXPRESSION,
            NAME,
            FK_BACKEND_FILTER,
            PRIORITY
            FROM
            (
            SELECT
            RC.ID_PK AS ID_PK,
            RC.EXPRESSION AS EXPRESSION,
            RC.NAME AS NAME,
            MIGR.ID_PK AS FK_BACKEND_FILTER,
            0 AS PRIORITY
            FROM TB_ROUTING_CRITERIA RC, TB_BACKEND_FILTER_MIGR MIGR
            WHERE RC.PRIORITY = MIGR.OLD_PRIO AND RC.FK_BACKEND_FILTER = MIGR.OLD_ID AND MIGR.CRITERIA_OPERATOR = 'OR'
            UNION ALL
            SELECT
            RC.ID_PK AS ID_PK,
            RC.EXPRESSION AS EXPRESSION,
            RC.NAME AS NAME,
            MIGR2.ID_PK AS FK_BACKEND_FILTER,
            RC.PRIORITY AS PRIORITY
            FROM TB_ROUTING_CRITERIA RC, TB_BACKEND_FILTER_MIGR2 MIGR2
            WHERE RC.FK_BACKEND_FILTER = MIGR2.OLD_ID AND MIGR2.CRITERIA_OPERATOR = 'AND'
            ORDER BY ID_PK) P);

            SELECT
            RC.ID_PK AS ID_PK,
            RC.EXPRESSION AS EXPRESSION,
            RC.NAME AS NAME,
            MIGR.ID_PK AS FK_BACKEND_FILTER,
            0 AS PRIORITY
            FROM TB_ROUTING_CRITERIA RC, TB_BACKEND_FILTER_MIGR MIGR
            WHERE RC.PRIORITY = MIGR.OLD_PRIO AND RC.FK_BACKEND_FILTER = MIGR.OLD_ID AND MIGR.CRITERIA_OPERATOR = 'OR'
            UNION ALL
            SELECT
            RC.ID_PK AS ID_PK,
            RC.EXPRESSION AS EXPRESSION,
            RC.NAME AS NAME,
            MIGR2.ID_PK AS FK_BACKEND_FILTER,
            RC.PRIORITY AS PRIORITY
            FROM TB_ROUTING_CRITERIA RC, TB_BACKEND_FILTER_MIGR2 MIGR2
            WHERE RC.FK_BACKEND_FILTER = MIGR2.OLD_ID AND MIGR2.CRITERIA_OPERATOR = 'AND'
            ORDER BY ID_PK;

            ALTER TABLE TB_ROUTING_CRITERIA DISABLE CONSTRAINT FK_I7GEI6BDR2CDN61HDOPLXBU7P;
            TRUNCATE TABLE TB_ROUTING_CRITERIA;
            TRUNCATE TABLE TB_BACKEND_FILTER;
            ALTER TABLE TB_ROUTING_CRITERIA ENABLE CONSTRAINT FK_I7GEI6BDR2CDN61HDOPLXBU7P;

            ALTER TABLE TB_BACKEND_FILTER DROP COLUMN CRITERIA_OPERATOR;

            INSERT INTO TB_BACKEND_FILTER
            SELECT ID_PK, BACKEND_NAME, PRIORITY FROM TB_BACKEND_FILTER_MIGR;

            INSERT INTO TB_ROUTING_CRITERIA
            SELECT * FROM TB_ROUTING_CRITERIA_MIGR;
        </sql>
    </changeSet>

    <changeSet id="EDELIVERY-1812" author="TiagoMiguel">
        <sql dbms="mysql">
            SET @OLD_SQL_SAFE_UPDATES = @@SQL_SAFE_UPDATES;
            SET SQL_SAFE_UPDATES = 0;
            UPDATE TB_ROUTING_CRITERIA SET NAME = 'service' WHERE UPPER(NAME) = 'SEVICE';
            SET SQL_SAFE_UPDATES = @OLD_SQL_SAFE_UPDATES;
        </sql>
        <sql dbms="oracle">
            UPDATE TB_ROUTING_CRITERIA SET NAME = 'SERVICE' WHERE UPPER(NAME) = 'SEVICE';
        </sql>
    </changeSet>

</databaseChangeLog>
