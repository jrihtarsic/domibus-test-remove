
# ---------------------------------- GUI -------------------------

#The title shown in the Tab of Admin Console
#default.domibus.UI.title.name=windowTitle

#The name of the domain
#default.domain.title=domainTitle

#enabled or disabled the UI Replication mechanism
#default.domibus.ui.replication.enabled=false

#support team name
#default.domibus.ui.support.team.name=EDELIVERY Support Team

#support team email
#default.domibus.ui.support.team.email=CEF-EDELIVERY-SUPPORT@ec.europa.eu

#Max rows for CSV export
#default.domibus.ui.csv.rows.max=10000

# ---------------------------------- Security ----------------------------------

#Domibus encrypts the configured passwords if activated
#default.domibus.password.encryption.active=false

#List of configured passwords to be encrypted. The properties should not be prefixed by the domain name.
#default.domibus.password.encryption.properties=domibus.security.keystore.password,domibus.security.key.private.password,domibus.security.truststore.password

#The location where the encrypted key is stored
#default.domibus.password.encryption.key.location=${domibus.config.location}/internal/encrypt/default

#Number of console login attempt before the user is deactivated (default 5)
#default.domibus.console.login.maximum.attempt=5

#Time in seconds for a suspended user to be reactivated. (1 hour per default if property is not set, if 0 the user will not be reactivated)
#default.domibus.console.login.suspension.time=3600

# ---------------------------------- Plugin Security ----------------------------------

#Number of plugin users login attempts before the user is deactivated (default 5)
#default.domibus.plugin.login.maximum.attempt=5

#Time in seconds for a suspended plugin user to be reactivated. (1 hour per default if property is not set, if 0 the user will not be reactivated)
#default.domibus.plugin.login.suspension.time=3600

#Cron job that determines the interval at which the system checks for plugin account to be reactivated.
#default.domibus.plugin.account.unlock.cron=0 0/1 * * * ?

# ---------------------------------- Password Policy -----------------------------------

#Password minimum complexity rules (empty to disable password complexity enforcement)
#default.domibus.passwordPolicy.pattern=^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~`!@#$%^&+=\\-_<>.,?:;*/()|\\[\\]{}'"\\\\]).{8,32}$

#Password validatin message
#default.domibus.passwordPolicy.validationMessage=Minimum length: 8 characters;Maximum length: 32 characters;At least one letter in lowercase;At least one letter in uppercase;At least one digit;At least one special character

#Password expiration policy in days (0 to disable)
#default.domibus.passwordPolicy.expiration=90

#Default password expiration policy in days (0 to disable)
#default.domibus.passwordPolicy.defaultPasswordExpiration=15

#Password expiration policy: how many days before expiration should the system warn users at login
#default.domibus.passwordPolicy.warning.beforeExpiration=15

#Password reuse policy: do not reuse any of the last N passwords (0 to disable)
#default.domibus.passwordPolicy.dontReuseLast=5

#Default password validation policy enabled/disabled (by default is enabled)
#default.domibus.passwordPolicy.checkDefaultPassword=true

#Cron expression that specifies the frequency of the password expiration check
#default.domibus.passwordPolicies.check.cron=0 0 0/1 * * ?

# ---------------------------------- Plugin Users Password Policy -----------------------------------

#Password minimum complexity rules (empty to disable password complexity enforcement)
#default.domibus.plugin.passwordPolicy.pattern=(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~`!@#$%^&+=\\-_<>.,?:;*/()|\\[\\]{}'"\\\\]).{8,32}$

#Password validation message
#default.domibus.plugin.passwordPolicy.validationMessage=Minimum length: 8 characters;Maximum length: 32 characters;At least one letter in lowercase;At least one letter in uppercase;At least one digit;At least one special character

#Password expiration policy in days (0 to disable)
#default.domibus.plugin.passwordPolicy.expiration=90

#Default password expiration policy in days (0 to disable)
#default.domibus.plugin.passwordPolicy.defaultPasswordExpiration=1

#Password reuse policy: do not reuse any of the last N passwords (0 to disable)
#default.domibus.plugin.passwordPolicy.dontReuseLast=5

#Cron expression that specifies the frequency of the password expiration check
#default.domibus.plugin_passwordPolicies.check.cron=0 0 0/1 * * ?

# ---------------------------------- Keystore/Truststore -----------------------

#The location of the keystore
default.domibus.security.keystore.location=${domibus.config.location}/keystores/gateway_keystore.jks

#The type of the used keystore
default.domibus.security.keystore.type=jks

#The password used to load the keystore
default.domibus.security.keystore.password=keystore_password

#Private key
#The alias from the keystore of the private key
default.domibus.security.key.private.alias=private_key_alias

#The private key password
default.domibus.security.key.private.password=private_key_password

#Truststore
#The location of the truststore
default.domibus.security.truststore.location=${domibus.config.location}/keystores/gateway_truststore.jks

#Type of the used truststore
default.domibus.security.truststore.type=jks

#The password used to load the trustStore
default.domibus.security.truststore.password=truststore_password

# ---------------------------------- Database ----------------------------------

#Domain schema
default.domibus.database.schema=domain_name_schema

# ---------------------------------- Payload -----------------------------------

#It is possible to configure Domibus to save the message payloads on the file system instead of the database. This setting is recommended when exchanging payloads bigger than 30MB.
#In order to enable the file system storage please configure the following property, it is the location on the file system where the payloads will be saved.
#Remark:
#In a cluster configuration the file system storage needs to be accessible by all the nodes from the cluster.
#default.domibus.attachment.storage.location=your_file_system_location

#Domibus encrypts the payloads stored in the database or file system if this property is active.
#default.domibus.payload.encryption.active=false

#The threshold in minutes for considering the temporary payloads as expired. The expired temporary payloads are scheduled to be deleted.
#default.domibus.payload.temp.job.retention.expiration=120

#Temporary files are excluded from deletion if this regular expression matches the file name
#default.domibus.payload.temp.job.retention.exclude.regex=.*ehcache-sizeof-agent.*

#List of directories to check for cleaning the temporary files.
#default.domibus.payload.temp.job.retention.directories=domibus.attachment.temp.storage.location

# ---------------------------------- Message -----------------------------------

#The suffix of the messageId generated by this instance of domibus. Schema is:  ${UUID}@${SUFFIX}
#default.domibus.msh.messageid.suffix=domibus.eu

# ---------------------------------- Retry -------------------------------------

#Retry Worker execution interval as a cron expression
#default.domibus.msh.retry.cron=0/5 * * * * ?

# ---------------------------------- Dynamic Discovery -------------------------

#Whether to use dynamic discovery or not
#default.domibus.dynamicdiscovery.useDynamicDiscovery=false

#The SML zone
#default.domibus.smlzone=acc.edelivery.tech.ec.europa.eu

#The dynamic discovery client to be used for the dynamic process. Possible values: OASIS and PEPPOL. Defaults to OASIS.
#default.domibus.dynamicdiscovery.client.specification=OASIS

#Specifies the PEPPOL dynamic discovery client mode: PRODUCTION or TEST mode. Defaults to TEST.
#default.domibus.dynamicdiscovery.peppolclient.mode=TEST

#Apart from validating response of signer certificates against the truststore, the Oasis Dynamic Discovery Client gives
#the possibility to add (optional) a regular expression (eg ^.*EHEALTH_SMP.*$)
#to validate any certificate metadata related to the subject of the signer certificate.
#default.domibus.dynamicdiscovery.oasisclient.regexCertificateSubjectValidation=

#The role of the responder PartyId may be defined here
#default.domibus.dynamicdiscovery.partyid.responder.role=http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/responder

#The type of the PartyId may be defined here (default values are: urn:fdc:peppol.eu:2017:identifiers:ap for PEPPOL and urn:oasis:names:tc:ebcore:partyid-type:unregistered for OASIS
#default.domibus.dynamicdiscovery.partyid.type=urn:oasis:names:tc:ebcore:partyid-type:unregistered

#The AS4 transport profile by which the endpoint is identified in the SMP response
#default.domibus.dynamicdiscovery.transportprofileas4=bdxr-transport-ebms3-as4-v1p0

# ---------------------------------- Validation --------------------------------

#If activated Domibus will verify before sending a message if the receiver's certificate is valid and not revoked. If the receiver's certificate
#is not valid or it has been revoked Domibus will not send the message and it will mark it as SEND_FAILURE (default is true)
#default.domibus.receiver.certificate.validation.onsending=true

#If activated Domibus will verify before sending a message if his own certificate is valid and not revoked. If the certificate is not valid
#or it has been revoked Domibus will not send the message and it will mark it as SEND_FAILURE (default is true)
#default.domibus.sender.certificate.validation.onsending=true

#If activated Domibus will verify before receiving a message if the sender's certificate is valid and not revoked. If the certificate is
#not valid or it has been revoked Domibus will not accept the message (default is true)
#default.domibus.sender.certificate.validation.onreceiving=true

#If activated Domibus will verify before receiving a message, the validity and authorization on the sender's certificate. When disabled,
#none of the other checks are performed on the sender's certificate.
#default.domibus.sender.trust.validation.onreceiving=true

#When this property is not empty Domibus will verify before receiving a message, that the subject of the sender's certificate matches the regular expression.
#default.domibus.sender.trust.validation.expression=

#When enabled, Domibus will verify before receiving a message, that the alias (party name) is present in the signing certificate subject.
#default.domibus.sender.certificate.subject.check=false

#When enabled, Domibus will verify before receiving a message, that the sender's certificate matches the certificate in the truststore,
#loaded based on the alias (party name)
#default.domibus.sender.trust.validation.truststore_alias=true

#Accepted Format for MessageId (Default value, based on RFC2822 [CORE 5.2.2.1]: ^[\\x20-\\x7E]*$ )
#default.domibus.sendMessage.messageIdPattern=^[\\x20-\\x7E]*$

#Accepted Format for xsd:datetime for AS4 communication
#default.domibus.datetime.pattern.onreceiving=yyyy-MM-dd'T'HH:mm:ss[.SSSSSSSSS][.SSSSSS][.SSS][z]

#Format of xsd:datetime used for AS4Receipt
#default.domibus.datetime.pattern.onsending=yyyy-MM-dd'T'HH:mm:ss.SSS'Z'

# ---------------------------------- Dispatcher --------------------------------

#Timeout values for communication between the access points
#ConnectionTimeOut - Specifies the amount of time, in milliseconds, that the consumer will attempt to establish a connection before it times out. 0 is infinite.
#default.domibus.dispatcher.connectionTimeout=240000

#ReceiveTimeout - Specifies the amount of time, in milliseconds, that the consumer will wait for a response before it times out. 0 is infinite.
#default.domibus.dispatcher.receiveTimeout=240000

#Allows chunking when sending messages to other Access Points
#default.domibus.dispatcher.allowChunking=false

#If domibus.dispatcher.allowChunking is true, this property sets the threshold at which messages start getting chunked(in bytes). Messages under this limit do not get chunked. Defaults to 100 MB.
#default.domibus.dispatcher.chunkingThreshold=104857600

#Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple upper limit String, e.g. "10" (the lower limit will be 1 in this case)
#when sending messages to other Access Points
#default.domibus.dispatcher.concurency=5-20

#Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple upper limit String, e.g. "10" (the lower limit will be 1 in this case)
#when sending large messages(SplitAndJoin) to other Access Points
#default.domibus.dispatcher.largeFiles.concurrency=1

#Cache the dispatcher clients used for communication between the access points. Defaults to true.
#default.domibus.dispatcher.cacheable=true

#Specifies if the connection will be kept alive between C2 and C3. Default value is true.
#default.domibus.dispatcher.connection.keepAlive=true

# ---------------------------------- Retention ---------------------------------

#Cron expression used for configuring the retention worker scheduling. The retention worker deletes the expired messages(downloaded and not-downloaded).
#default.domibus.retentionWorker.cronExpression=0 0/1 * * * ?

#Uncomment the following line if you need to tweak the maximum downloaded messages to be deleted by the retention worker. Defaults to 50.
#default.domibus.retentionWorker.message.retention.downloaded.max.delete=50

#Uncomment the following line if you need to tweak the maximum not-downloaded messages to be deleted by the retention worker. Defaults to 50.
#default.domibus.retentionWorker.message.retention.not_downloaded.max.delete=50

#Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple upper limit String, e.g. "10" (the lower limit will be 1 in this case)
#when deleting messages
#default.domibus.retention.jms.concurrency=5-10

# ---------------------------------- Pulling-----------------------------------

#Cron expression used for configuring the message puller scheduling.
#default.domibus.msh.pull.cron=0 0 0/1 * * ?

# Number of threads used to parallelize the pull requests.
#default.domibus.pull.queue.concurency=1-1

# Number of threads used to parallelize the pull receipts.
#default.pull.receipt.queue.concurrency=1-1

#Number or requests per MPC executed every cron cycle. Generic value that applies to all MPCs.
#default.domibus.pull.request.send.per.job.cycle=1

#Optional number or requests per specific MPC executed every cron cycle.
#Takes precedence over the generic "domibus.pull.request.send.per.job.cycle property" value.
#MPCs are indicated by their short names.
#default.domibus.pull.request.send.per.job.cycle.per.mpc.MPC_NAME=1

#Time in second for the system to recover its full pull capacity when job schedule is one execution per second.
#If configured to 0, no incremental frequency is executed and the pull pace is executed at its maximum.
#default.domibus.pull.request.frequency.recovery.time=0

#Number of connection failure before the system decrease the pull pace.
#default.domibus.pull.request.frequency.error.count=10

#Pull Retry Worker execution interval as a cron expression
#default.domibus.pull.retry.cron=0/10 * * * * ?

#Allow dynamic initiator on pull requests - 0 or multiple initiators are allowed in the Pmode process
#default.domibus.pull.dynamic.initiator=false

#Allow multiple legs configured on the same pull process (with the same security policy)
#default.domibus.pull.multiple_legs=false

#Force message into READY_TO_PULL when mpc attribute is present (default is false)
#default.domibus.pull.force_by_mpc=false

#Mpc initiator separator. This is used when the mpc provides information on the initiator: baseMpc/SEPARATOR/partyName
#default.domibus.pull.mpc_initiator_separator=PID

# ---------------------------------- Alert management -----------------------------------
#Enable/disable the entire alert module. Pay attention to the fact that if the module is activated, all properties
#under the mandatory section should be configured.
#default.domibus.alert.active=true

#Allow to disable alert mail sending.
#default.domibus.alert.mail.sending.active=false

# -----------------------------------Mandatory configuration start (if domibus.alert.mail.sending.active=true) -----------

#Alert sender email.
default.domibus.alert.sender.email=

#Alert email receiver. You can specify multiple recipients by using semicolon separated email addresses:name1@gmail.com;name2@gmail.com
default.domibus.alert.receiver.email=

# ----------------------------------Mandatory configuration end-----------------------------------

#The following properties can stay commented if no modifications to the default values are needed.

#Cron configuration for cleaning alerts.
#default.domibus.alert.cleaner.cron=0 0 0/1 * * ?

#Lifetime in days of alerts before cleaning.
#default.domibus.alert.cleaner.alert.lifetime=20

#Frequency of failed alerts retry.
#default.domibus.alert.retry.cron=0 0/1 * * * ?

#Elapsed time in minutes between alert retry.
#default.domibus.alert.retry.time=1

#Maximum number of attempts for failed alerts
#default.domibus.alert.retry.max_attempts=2

# ---------------------------------- Alert management:messaging module -----------------

#Enable/disable the messaging alert module.
#default.domibus.alert.msg.communication_failure.active=true

#Message status change that should be notified by the messaging alert module. Comma separated.
#default.domibus.alert.msg.communication_failure.states=SEND_FAILURE

#Alert levels corresponding to message status defined in previous property(domibus.alert.msg.communication_failure.states) .
#Should be (HIGH, MEDIUM OR LOW)
#default.domibus.alert.msg.communication_failure.level=HIGH

#Messaging alert module mail subject.
#default.domibus.alert.msg.communication_failure.mail.subject=Message status change

# ---------------------------------- Alert management:Authentication module -----------------

#Enable/disable the login failure alert of the authentication module.
#default.domibus.alert.user.login_failure.active=true

#Alert level for login failure.
#default.domibus.alert.user.login_failure.level=LOW

#Login failure mail subject.
#default.domibus.alert.user.login_failure.mail.subject=Login failure

#Enable/disable the account disable alert of the authentication module.
#default.domibus.alert.user.account_disabled.active=true

#Alert level for account disabled. Used in the email to be sent. Values: {LOW, MEDIUM, HIGH}
#default.domibus.alert.user.account_disabled.level=HIGH

#When should the account disabled alert be triggered.
# 2 possible values:
# AT_LOGON: An alert will be triggered each time a user tries to login to a disabled account.
# WHEN_BLOCKED: An alert will be triggered once when the account got disabled.
#default.domibus.alert.user.account_disabled.moment=WHEN_BLOCKED

#Account disabled mail subject.
#default.domibus.alert.user.account_disabled.subject=Account disabled

#Enable/disable the account enabled alert of the authentication module.
#default.domibus.alert.user.account_enabled.active=false

#Alert level for account enabled. Used in the email to be sent. Values: {LOW, MEDIUM, HIGH}
#default.domibus.alert.user.account_enabled.level=MEDIUM

#Account enabled mail subject.
#default.domibus.alert.user.account_enabled.subject=Account enabled

# ---------------------------------- Alert management:Authentication module for Plugin users-----------------

#Enable/disable the login failure alert of the authentication module.
#default.domibus.alert.plugin.user.login_failure.active=true

#Alert level for login failure.
#default.domibus.alert.plugin.user.login_failure.level=LOW

#Login failure mail subject.
#default.domibus.alert.plugin.user.login_failure.mail.subject=Login failure

#Enable/disable the account disable alert of the authentication module.
#default.domibus.alert.plugin.user.account_disabled.active=true

#Alert level for account disabled. Used in the email to be sent. Values: {LOW, MEDIUM, HIGH}
#default.domibus.alert.plugin.user.account_disabled.level=HIGH

#When should the account disabled alert be triggered.
# 2 possible values:
# AT_LOGON: An alert will be triggered each time a user tries to login to a disabled account.
# WHEN_BLOCKED: An alert will be triggered once when the account got disabled.
#default.domibus.alert.plugin.user.account_disabled.moment=WHEN_BLOCKED

#Account disabled mail subject.
#default.domibus.alert.plugin.user.account_disabled.subject=Account disabled

#Enable/disable the account enable alert of the authentication module.
#default.domibus.alert.plugin.user.account_enabled.active=false

#Alert level for account enabled. Used in the email to be sent. Values: {LOW, MEDIUM, HIGH}
#default.domibus.alert.plugin.user.account_enabled.level=MEDIUM

#Account enabled mail subject.
#default.domibus.alert.plugin.user.account_enabled.subject=Account enabled

# ---------------------------------- Alert management:Certificate scanner -----------------

#Enable/disable the imminent certificate expiration alert of certificate scanner module.
#default.domibus.alert.cert.imminent_expiration.active=true

#Number of days before revocation as from when the system should start sending alerts.
#default.domibus.alert.cert.imminent_expiration.delay_days=60

#Frequency in days between alerts.
#default.domibus.alert.cert.imminent_expiration.frequency_days=14

#Certificate imminent expiration alert level.
#default.domibus.alert.cert.imminent_expiration.level=HIGH

#Certificate imminent expiration mail subject.
#default.domibus.alert.cert.imminent_expiration.mail.subject=Certificate imminent expiration

#Enable/disable the certificate expired alert of certificate scanner module.
#default.domibus.alert.cert.expired.active=true

#Frequency in days between alerts.
#default.domibus.alert.cert.expired.frequency_days=7

#How long(in days) after the revocation should the system trigger alert for the expired certificate.
#default.domibus.alert.cert.expired.duration_days=90

#Certificate expired alert level.
#default.domibus.alert.cert.expired.level=HIGH

#Certificate expired mail subject.
#default.domibus.alert.cert.expired.mail.subject=Certificate expired

# ---------------------------------- Alert management:Password policy  -----------------

#Enable/disable the imminent password expiration alert
#default.domibus.alert.password.imminent_expiration.active=true

#Number of days before expiration as for how long before expiration the system should send alerts.
#default.domibus.alert.password.imminent_expiration.delay_days=15

#Frequency in days between alerts.
#default.domibus.alert.password.imminent_expiration.frequency_days=3

#Password imminent expiration alert level.
#default.domibus.alert.password.imminent_expiration.level=LOW

#Password imminent expiration mail subject.
#default.domibus.alert.password.imminent_expiration.mail.subject=Password imminent expiration

#Enable/disable the imminent password expiration alert
#default.domibus.alert.password.expired.active=true

#Number of days after expiration as for how long the system should send alerts.
#default.domibus.alert.password.expired.delay_days=30

#Frequency in days between alerts.
#default.domibus.alert.password.expired.frequency_days=5

#Password expiration alert level.
#default.domibus.alert.password.expired.level=LOW

#Password expiration mail subject.
#default.domibus.alert.password.expired.mail.subject=Password expired

# ---------------------------------- Various ---------------------------------------

#Whether to delete the message payload on send failure. Defaults to false (the administrator can put the message back in the send queue).
#default.domibus.sendMessage.failure.delete.payload=false

#Whether to delete the message payload on send success. Defaults to true (preserves backwards compatibility).
#domibus.sendMessage.success.delete.payload=true

#Should unrecoverable errors be retried or not
#default.domibus.dispatch.ebms.error.unrecoverable.retry=true

#The maximum file size in bytes that can be uploaded through REST ( pMode, trustStore)
#default.domibus.file.upload.maxSize=10000000

#prints the raw XML response in the logs in case of EBMS3 error on receiver/sender side (if eu.domibus is put at least on ERROR)
#default.domibus.logging.ebms3.error.print=true

# ---------------------------------- Extensions ------------------------------------

#Name of the authentication extension used to verify the chain trust. Default is CXF
#default.domibus.extension.iam.authentication.identifier=DEFAULT_AUTHENTICATION_SPI

#Name of the authorization extension used to check incoming message authorization. Default is truststore check.
#default.domibus.extension.iam.authorization.identifier=DEFAULT_AUTHORIZATION_SPI

# ------------------------------- SplitAndJoin ---------------------------------------

#SplitAndJoin only: Domibus uses a  file system location for storing temporary data when processing SplitAndJoin messages
#In a cluster configuration the temporary file system storage needs to be accessible by all the nodes from the cluster.
#default.domibus.attachment.temp.storage.location=your_temporary_file_system_location

#Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple upper limit String, e.g. "10" (the lower limit will be 1 in this case)
#when sending the SourceMessage receipt(Split and Join) to other Access Points
#default.domibus.dispatcher.splitAndJoin.concurrency=1

#The threshold value in MB to switch from synchronous to asynchronous saving of outgoing SourceMessage payloads
#default.domibus.dispatcher.splitAndJoin.payloads.schedule.threshold=1000

#Cron expression that specifies the frequency of the checking if the joinInterval has expired
#default.domibus.splitAndJoin.receive.expiration.cron=0 0/5 * * * ?

# --------------------------- Connection Monitoring ----------------------------------

#Specifies the parties for which to monitor the connection (comma-separated list)
#default.domibus.monitoring.connection.party.enabled=

#Cron expression that specifies the frequency of test messages sent to monitor the C2-C3 connections
#default.domibus.monitoring.connection.cron=0 0 0/2 ? * * *

# ------------------------------------------------------------------------------------
