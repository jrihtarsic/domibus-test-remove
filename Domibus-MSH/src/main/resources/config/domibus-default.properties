# ---------------------------------- Cluster -----------------------------------

#Specifies if Domibus should run in cluster mode. This affects for instance whether the Quartz jobs are clustered.
domibus.deployment.clustered=false

# ---------------------------------- GUI -------------------------

# The title shown in the Tab of Admin Console (default value: "Domibus")
domibus.UI.title.name=Domibus

#Max rows for CSV export
domibus.ui.csv.max.rows=10000

# ---------------------------------- EntityManagerFactory ----------------------

#Packages to be scanned(comma separated)
domibus.entityManagerFactory.packagesToScan=eu.domibus

domibus.entityManagerFactory.jpaProperty.hibernate.format_sql=true

# ---------------------------------- Security ----------------------------------

#To activate security set this to false
domibus.auth.unsecureLoginAllowed=true

#Number of console login attempt before the user is deactivated (default 5)
domibus.console.login.maximum.attempt=5

#Time in seconds for a suspended user to be reactivated. (1 hour per default if property is not set, if 0 the user will not be reactivated)
domibus.console.login.suspension.time=3600

#Cron job that determines the interval at which the system checks for account to be reactivated.
domibus.account.unlock.cron=0 0/1 * * * ?

#When a certificate is about to expires the system will log a warning. The warning will appear as from the expiration date - the offset in days.
domibus.certificate.revocation.offset=15

#Cron expression that specifies the frequency of the certificate revocation check.
domibus.certificate.check.cron=0 0 0/1 * * ?

# ---------------------------------- Plugin Security ----------------------------------

#Number of console login attempt before the user is deactivated (default 5)
domibus.plugin.login.maximum.attempt=5

#Time in seconds for a suspended plugin user to be reactivated. (1 hour per default if property is not set, if 0 the user will not be reactivated)
domibus.plugin.login.suspension.time=3600

#Cron job that determines the interval at which the system checks for plugin account to be reactivated.
domibus.plugin.account.unlock.cron=0 0/1 * * * ?

# ---------------------------------- Message -----------------------------------

#The suffix of the messageId generated by this instance of domibus. Schema is:  ${UUID}@${SUFFIX}
domibus.msh.messageid.suffix=domibus.eu

# ---------------------------------- Retry -------------------------------------

#Retry Worker execution interval as a cron expression
domibus.msh.retry.cron=0/5 * * * * ?

# ---------------------------------- Dynamic Discovery -------------------------

#Whether to use dynamic discovery or not
domibus.dynamicdiscovery.useDynamicDiscovery=false

#The SML zone
domibus.smlzone=acc.edelivery.tech.ec.europa.eu

#The dynamic discovery client to be used for the dynamic process. Possible values: OASIS and PEPPOL. Defaults to OASIS.
domibus.dynamicdiscovery.client.specification=OASIS

#Specifies the PEPPOL dynamic discovery client mode: PRODUCTION or TEST mode. Defaults to TEST.
domibus.dynamicdiscovery.peppolclient.mode=TEST

#Apart from validating response of signer certificates against the truststore, the Oasis Dynamic Discovery Client gives
#the possibility to add (optional) a regular expression to validate any certificate metadata related to the subject of the signer certificate.
domibus.dynamicdiscovery.oasisclient.regexCertificateSubjectValidation="^.*EHEALTH_SMP.*$"

#The following property cannot be set to a default value because it contains different default values for the different specifications (OASIS vs. PEPPOL)
#The role of the responder PartyId may be defined here (default values are: urn:fdc:peppol.eu:2017:roles:ap:as4 for PEPPOL and http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/responder for OASIS
#domibus.dynamicdiscovery.partyid.responder.role=http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/responder
#domibus.dynamicdiscovery.partyid.responder.role=urn:fdc:peppol.eu:2017:roles:ap:as4

#The following property cannot be set to a default value because it contains different default values for the different specifications (OASIS vs. PEPPOL)
#The type of the PartyId may be defined here (default values are: urn:fdc:peppol.eu:2017:identifiers:ap for PEPPOL and urn:oasis:names:tc:ebcore:partyid-type:unregistered for OASIS
#domibus.dynamicdiscovery.partyid.type=urn:oasis:names:tc:ebcore:partyid-type:unregistered
#domibus.dynamicdiscovery.partyid.type=urn:fdc:peppol.eu:2017:identifiers:ap

#The AS4 transport profile by which the endpoint is identified in the SMP response
domibus.dynamicdiscovery.transportprofileas4=bdxr-transport-ebms3-as4-v1p0

# ---------------------------------- Dispatcher --------------------------------

#Timeout values for communication between the access points
#ConnectionTimeOut - Specifies the amount of time, in milliseconds, that the consumer will attempt to establish a connection before it times out. 0 is infinite.
domibus.dispatcher.connectionTimeout=240000

#ReceiveTimeout - Specifies the amount of time, in milliseconds, that the consumer will wait for a response before it times out. 0 is infinite.
domibus.dispatcher.receiveTimeout=240000

#Allows chunking when sending messages to other Access Points
domibus.dispatcher.allowChunking=true

#If domibus.dispatcher.allowChunking is true, this property sets the threshold at which messages start getting chunked(in bytes). Messages under this limit do not get chunked. Defaults to 100 MB.
domibus.dispatcher.chunkingThreshold=104857600

#Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple upper limit String, e.g. "10" (the lower limit will be 1 in this case)
#when sending messages to other Access Points
domibus.dispatcher.concurency=5-20

#Cache the dispatcher clients used for communication between the access points. Defaults to false.
domibus.dispatcher.cacheable=false

#Specifies if the connection will be kept alive between C2 and C3. Default value is false.
domibus.dispatcher.connection.keepAlive=false

# ---------------------------------- Retention ---------------------------------

#Cron expression used for configuring the retention worker scheduling. The retention worker deletes the expired messages(downloaded and not-downloaded).
domibus.retentionWorker.cronExpression=0 0/1 * * * ?

#Maximum downloaded messages to be deleted by the retention worker.
domibus.retentionWorker.message.retention.downloaded.max.delete=50

#Maximum not-downloaded messages to be deleted by the retention worker.
domibus.retentionWorker.message.retention.not_downloaded.max.delete=50

# ---------------------------------- Proxy -------------------------------------

domibus.proxy.enabled=false
domibus.proxy.http.host=
domibus.proxy.http.port=
domibus.proxy.user=
domibus.proxy.password=
domibus.proxy.nonProxyHosts=

# ---------------------------------- Alert management -----------------------------------

#Cron configuration for cleaning alerts.
domibus.alert.cleaner.cron=0 0 0/1 * * ?

#Lifetime in days of alerts before cleaning.
domibus.alert.cleaner.alert.lifetime=20

#Enable/disable the entire alert module.
domibus.alert.active=true

#Allow to disable alert mail sending.
domibus.alert.mail.sending.active=false

#SMTP Socket I/O timeout value in milliseconds
domibus.alert.mail.smtp.timeout=5000

#Concurency to process the alerts.
domibus.alert.queue.concurrency=1

#Frequency of failed alerts retry.
domibus.alert.retry.cron=0 0/1 * * * ?

#Elapsed time in minutes between alert retry.
domibus.alert.retry.time=1

#Maximum number of attempts for failed alerts
domibus.alert.retry.max_attempts=2

# ---------------------------------- Super user Alert management -----------------------------------

#Cron configuration for cleaning alerts.
domibus.alert.super.cleaner.cron=0 0 0/1 * * ?

#Lifetime in days of alerts before cleaning.
domibus.alert.super.cleaner.alert.lifetime=20

#Enable/disable the entire alert module.
domibus.alert.super.active=true

#Allow to disable alert mail sending.
domibus.alert.super.mail.sending.active=false

#Frequency of failed alerts retry.
domibus.alert.super.retry.cron=0 0/1 * * * ?

#Elapsed time in minutes between alert retry.
domibus.alert.super.retry.time=1

#Maximum number of attempts for failed alerts
domibus.alert.super.retry.max_attempts=2

# ---------------------------------- Alert management:messaging module -----------------

#Enable/disable the messaging alert module.
domibus.alert.msg.communication_failure.active=true

#Message status change that should be notified by the messaging alert module. Comma separated.
domibus.alert.msg.communication_failure.states=SEND_FAILURE

#Alert levels corresponding to message status defined in previous property(domibus.alert.msg.communication_failure.states) .
#Should be (HIGH, MEDIUM OR LOW)
domibus.alert.msg.communication_failure.level=HIGH

#Messaging alert module mail subject.
domibus.alert.msg.communication_failure.mail.subject=Message status change

# ---------------------------------- Alert management:Authentication module -----------------

#Enable/disable the login failure alert of the authentication module.
domibus.alert.user.login_failure.active=true

#Alert level for login failure.
domibus.alert.user.login_failure.level=LOW

#Login failure mail subject.
domibus.alert.user.login_failure.mail.subject=Login failure

#Enable/disable the account disable alert of the authentication module.
domibus.alert.user.account_disabled.active=true

#Alert level for account disabled.
domibus.alert.user.account_disabled.level=HIGH

#When should the account disabled alert be triggered.
# 2 possible values:
# AT_LOGON: An alert will be triggered each a time user tries to login to a disabled account.
# WHEN_BLOCKED: An alert will be triggered once when the account got disabled.
domibus.alert.user.account_disabled.moment=WHEN_BLOCKED

#Account disabled mail subject.
domibus.alert.user.account_disabled.subject=Account disabled

# ---------------------------------- Super user alert management:Authentication module -----------------

#Enable/disable the login failure alert of the authentication module.
domibus.alert.super.user.login_failure.active=true

#Alert level for login failure.
domibus.alert.super.user.login_failure.level=LOW

#Login failure mail subject.
domibus.alert.super.user.login_failure.mail.subject=Super user login failure

#Enable/disable the account disable alert of the authentication module.
domibus.alert.super.user.account_disabled.active=true

#Alert level for account disabled.
domibus.alert.super.user.account_disabled.level=HIGH

#When should the account disabled alert be triggered.
# 2 possible values:
# AT_LOGON: An alert will be triggered each a time user tries to login to a disabled account.
# WHEN_BLOCKED: An alert will be triggered once when the account got disabled.
domibus.alert.super.user.account_disabled.moment=WHEN_BLOCKED

#Account disabled mail subject.
domibus.alert.super.user.account_disabled.subject=Super user account disabled

# ---------------------------------- Alert management:Certificate scanner -----------------

#Enable/disable the imminent certificate expiration alert of certificate scanner module.
domibus.alert.cert.imminent_expiration.active=true

#Number of days before revocation as from when the system should start sending alerts.
domibus.alert.cert.imminent_expiration.delay_days=60

#Frequency in days between alerts.
domibus.alert.cert.imminent_expiration.frequency_days=14

#Certificate imminent expiration alert level.
domibus.alert.cert.imminent_expiration.level=HIGH

#Certificate imminent expiration mail subject.
domibus.alert.cert.imminent_expiration.mail.subject=Certificate imminent expiration

#Enable/disable the certificate expired alert of certificate scanner module.
domibus.alert.cert.expired.active=true

#Frequency in days between alerts.
domibus.alert.cert.expired.frequency_days=7

#How long(in days) after the revocation should the system trigger alert for the expired certificate.
domibus.alert.cert.expired.duration_days=90

#Certificate expired alert level.
domibus.alert.cert.expired.level=HIGH

#Certificate expired mail subject.
domibus.alert.cert.expired.mail.subject=Certificate expired

# ---------------------------------- Pulling-----------------------------------

#Cron expression used for configuring the message puller scheduling.
domibus.msh.pull.cron=0 0 0/1 * * ?

# Number of threads used to parallelize the pull requests.
domibus.pull.queue.concurency=1-1

#Number or requests executed every cron cycle
domibus.pull.request.send.per.job.cycle=1

#Pull Retry Worker execution interval as a cron expression
domibus.pull.retry.cron=0/10 * * * * ?

# ---------------------------------- UI Replication -----------------------------------
#enabled or disabled the UI Replication mechanism
domibus.ui.replication.enabled=false

#Cron job that will check unsynchronized data between native tables and TB_UI_MESSAGE_UI
domibus.ui.replication.sync.cron=0 0 2 * * ?

#max number of records that will be processed by cron job
domibus.ui.replication.sync.cron.max.rows=10000

#concurrency (no of threads) for dispatching messages of ui replication queue
domibus.ui.replication.queue.concurency=3-10

# ---------------------------------- JMS ---------------------------------------

#Domibus internal queue used for dispatching the pull requests
domibus.jms.queue.pull=jms/domibus.internal.pull.queue

#Domibus internal queue used for UI replication
domibus.jms.queue.ui.replication=jms/domibus.internal.ui.replication.queue

#The maximum number of pending messages to be listed from the backend notification queue. Setting this property is expected to avoid timeouts due to huge resultsets being served.
#Setting this property to zero returns all pending messages
domibus.listPendingMessages.maxCount=500

#The maximum number of messages to be listed from the JMS queues. Setting this property is expected to avoid timeouts due to huge results being served.
#Setting this property to zero returns all messages
domibus.jms.queue.maxBrowseSize=10000

#Regular expression used for identifying the internal queues in the Admin Page
domibus.jms.internalQueue.expression=.*domibus\.(internal|DLQ|backend\.jms|notification\.jms|notification\.webservice|notification\.kerkovi|notification\.filesystem).*

#Domibus internal queue used for alerts
domibus.jms.queue.alert=jms/domibus.internal.alert.queue

# ---------------------------------- Validation --------------------------------

#If activated Domibus will verify before sending a User Message if the receiver's certificate is valid and not revoked. If the receiver's certificate is not valid or it has been revoked
#Domibus will not send the message and it will mark it as SEND_FAILURE (default is true)
domibus.receiver.certificate.validation.onsending=true

#If activated Domibus will verify before sending a User Message if his own certificate is valid and not revoked. If the certificate is not valid or it has been revoked
#Domibus will not send the message and it will mark it as SEND_FAILURE (default is true)
domibus.sender.certificate.validation.onsending=true

#If activated Domibus will verify before receiving a User Message if the sender's certificate is valid and not revoked. If the certificate is not valid or it has been revoked
#Domibus will not accept the message (default is true)
domibus.sender.certificate.validation.onreceiving=true

#If activated Domibus will verify before receiving a User Message if the sender's party name is part of the CN in the sender's certificate. If not,
#Domibus will not accept the message (default is false)
domibus.sender.trust.validation.onreceiving = false

#Accepted Format for MessageId (Default value, based on RFC2822 [CORE 5.2.2.1]: ^[\\x20-\\x7E]*$ )
domibus.sendMessage.messageIdPattern=^[\\x20-\\x7E]*$

# ---------------------------------- Various -----------------------------------

#The factory for creating SOAPMessage objects
messageFactoryClass=com.sun.xml.internal.messaging.saaj.soap.ver1_2.SOAPMessageFactory1_2Impl

#If disabled, Domibus will not notify the plugins when the state of the User Message changes. Defaults to true.
domibus.plugin.notification.active=true

#If disabled, Domibus will not save the non repudiation audit data. Defaults to true.
domibus.nonrepudiation.audit.active=true

#The list of mime-types that will not be compressed (in outgoing messages) even if compression is turned on for the given message.
compressionBlacklist=application/vnd.etsi.asic-s+zip,image/jpeg

#Whether to delete the message payload on send failure. Defaults to false (the administrator can put the message back in the send queue).
domibus.sendMessage.failure.delete.payload=false

#If disabled, Domibus will not save the message attempt details when there is a failure sending a message. Defaults to true.
domibus.sendMessage.attempt.audit.active=true

#Should unrecoverable errors should be retried or not
domibus.dispatch.ebms.error.unrecoverable.retry=true

#Number of threads used to parallelize the dispatching of messages to the plugins.
domibus.internal.queue.concurency=3-10

#finalRecipient and originalSender properties are used in filtering the messages on GUI. Defaults to true.
domibus.fourcornermodel.enabled=true

# ---------------------------------- Password Policy -----------------------------------

#Password minimum complexity rules (empty to disable password complexity enforcement)
domibus.passwordPolicy.pattern=^.*(?=..*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~`!@#$%^&+=\\-_<>.,?:;*/()|\\[\\]{}'"\\\\]).{8,32}$

#Password validation message
domibus.passwordPolicy.validationMessage=Minimum length: 8 characters;Maximum length: 32 characters;At least one letter in lowercase;At least one letter in uppercase;At least one digit;At least one special character

#Password expiration policy in days (0 to disable)
domibus.passwordPolicy.expiration=90

#Default password expiration policy in days (0 to disable)
domibus.passwordPolicy.defaultPasswordExpiration=1

#Password expiration policy: how many days before expiration should the system warn users at login
domibus.passwordPolicy.warning.beforeExpiration=15

#Password reuse policy: do not reuse any of the last N passwords (0 to disable)
domibus.passwordPolicy.dontReuseLast=5

#Default password validation policy enabled/disabled (by default is enabled)
domibus.passwordPolicy.checkDefaultPassword=true

#Cron expression that specifies the frequency of the password expiration check
domibus.passwordPolicies.check.cron=0 0 0/1 * * ?

# ---------------------------------- Alert management: Plugin Users Password Policy -----------------------------------

#Password minimum complexity rules (empty to disable password complexity enforcement)
domibus.plugin.passwordPolicy.pattern=^.*(?=..*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~`!@#$%^&+=\\-_<>.,?:;*/()|\\[\\]{}'"\\\\]).{8,32}$

#Password validation message
domibus.plugin.passwordPolicy.validationMessage=Minimum length: 8 characters;Maximum length: 32 characters;At least one letter in lowercase;At least one letter in uppercase;At least one digit;At least one special character

#Password expiration policy in days (0 to disable)
domibus.plugin.passwordPolicy.expiration=90

#Default password expiration policy in days (0 to disable)
domibus.plugin.passwordPolicy.defaultPasswordExpiration=1

#Password reuse policy: do not reuse any of the last N passwords (0 to disable)
domibus.plugin.passwordPolicy.dontReuseLast=5

#Cron expression that specifies the frequency of the password expiration check
domibus.plugin_passwordPolicies.check.cron=0 0 0/1 * * ?

# ---------------------------------- Alert management:Password policy  -----------------

#Enable/disable the imminent password expiration alert
domibus.alert.password.imminent_expiration.active=true

#Number of days before expiration as for how long before expiration the system should send alerts.
domibus.alert.password.imminent_expiration.delay_days=15

#Frequency in days between alerts.
domibus.alert.password.imminent_expiration.frequency_days=3

#Password imminent expiration alert level.
domibus.alert.password.imminent_expiration.level=LOW

#Password imminent expiration mail subject.
domibus.alert.password.imminent_expiration.mail.subject=Password imminent expiration

#Enable/disable the imminent password expiration alert
domibus.alert.password.expired.active=true

#Number of days after expiration as for how long the system should send alerts.
domibus.alert.password.expired.delay_days=30

#Frequency in days between alerts.
domibus.alert.password.expired.frequency_days=5

#Password expiration alert level.
domibus.alert.password.expired.level=LOW

#Password expiration mail subject.
domibus.alert.password.expired.mail.subject=Password expired

# ------------------------------- Domibus instance/environment name ------------------
domibus.instance.name = Domibus

# ---------------------------------- Alert management:Authentication module for Plugin users-----------------

#Enable/disable the login failure alert of the authentication module.
domibus.alert.plugin.user.login_failure.active=true

#Alert level for login failure.
domibus.alert.plugin.user.login_failure.level=LOW

#Login failure mail subject.
domibus.alert.plugin.user.login_failure.mail.subject=Login failure

#Enable/disable the account disable alert of the authentication module.
domibus.alert.plugin.user.account_disabled.active=true

#Alert level for account disabled.
domibus.alert.plugin.user.account_disabled.level=HIGH

#When should the account disabled alert be triggered.
# 2 possible values:
# AT_LOGON: An alert will be triggered each time a user tries to login to a disabled account.
# WHEN_BLOCKED: An alert will be triggered once when the account got disabled.
domibus.alert.plugin.user.account_disabled.moment=WHEN_BLOCKED

#Account disabled mail subject.
domibus.alert.plugin.user.account_disabled.subject=Account disabled
# ------------------------------------------------------------------------------------