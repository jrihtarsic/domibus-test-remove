<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util.xsd">


    <import resource="file:///${domibus.config.location}/domibus-security.xml"/>

    <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>

    <bean id="gatewayConfigurationValidator" class="eu.domibus.common.validators.GatewayConfigurationValidator"/>

    <!-- Internal configuration provider. Do not change unless you have special requirements (i.e. dynamic
    discovery injection of PModes)-->
    <bean id="pModeProvider"
          class="eu.domibus.ebms3.common.dao.CachingPModeProvider"/>

    <!--<bean id="pModeDao"
          class="eu.domibus.common.dao.PModeDao"/>-->

    <!-- General domibus properties -->
    <util:properties id="domibusProperties">
        <!-- The suffix of the messageId generated by this instance of domibus.
        Schema is:  ${UUID}@${SUFFIX} -->
        <prop key="domibus.msh.messageid.suffix">domibus.eu</prop>
        <!-- Retry Worker execution interval as a cron expression -->
        <prop key="domibus.msh.retry.cron">0/5 * * * * ?</prop>
        <prop key="domibus.msh.pull.cron">0/20 * * * * ?</prop>
        <prop key="domibus.account.unlock.cron">0 0/1 * * * ?</prop>
        <prop key="domibus.certificate.check.cron">0 0 0/1 * * ?</prop>
        <!-- Timeout tolerance for retry messages (in miliseconds). Scheduled retries that, due to any reason, were not performed within this period will be timeout -->
        <prop key="domibus.msh.retry.tolerance">10800000</prop>
        <!-- Should unrecoverable errors should be retried or not -->
        <prop key="domibus.dispatch.ebms.error.unrecoverable.retry">true</prop>
        <prop key="domibus.smlzone">acc.edelivery.tech.ec.europa.eu</prop>
        <!-- Select PEPPOL or OASIS specification for the dynamic discovery client. The OASIS compliant client is used by default. -->
        <!-- <prop key="domibus.dynamicdiscovery.client.specification">PEPPOL</prop> -->
        <prop key="domibus.backend.jmsInQueue">domibus.backend.jms.inQueue</prop>
        <prop key="domibus.jms.queue.pull">domibus.internal.pull.queue</prop>
        <prop key="domibus.deployment.clustered">false</prop>
        <prop key="messageFactoryClass">com.sun.xml.internal.messaging.saaj.soap.ver1_2.SOAPMessageFactory1_2Impl</prop>
        <prop key="domibus.certificate.validation.enabled">true</prop>
        <prop key="domibus.senderparty.trust.verification">true</prop>
        <!-- regular expression used for identifying the internal queues in the Admin Page -->
        <prop key="domibus.jms.internalQueue.expression">
            .*domibus\.(internal|DLQ|backend\.jms|notification\.jms|notification\.webservice|notification\.kerkovi).*
        </prop>
        <prop key="activeMQ.JMXURL">service:jmx:rmi:///jndi/rmi://localhost:2000/jmxrmi</prop>
        <prop key="activeMQ.brokerName">localhost</prop>
        <prop key="compressionBlacklist">application/vnd.etsi.asic-s+zip,image/jpeg</prop>


        <!--Accepted Format for MessageId-->
        <prop key="domibus.sendMessage.messageIdPattern">^[\x20-\x7E]*$</prop>

        <!-- Whether to delete the message payload on send failure. Defaults to false (the admin could put the message back in the send queue) -->
        <prop key="domibus.sendMessage.failure.delete.payload">false</prop>

        <!--Maximum number of pending messages to be listed -->
        <prop key="domibus.listPendingMessages.maxCount">500</prop>

        <!--Timeout values for communication between the access points -->
        <!--ConnectionTimeOut - Specifies the amount of time, in milliseconds, that the consumer will attempt to establish a connection before it times out. 0 is infinite.-->
        <prop key="domibus.dispatcher.connectionTimeout">240000</prop>
        <!--ReceiveTimeout - Specifies the amount of time, in milliseconds, that the consumer will wait for a response before it times out. 0 is infinite.-->
        <prop key="domibus.dispatcher.receiveTimeout">240000</prop>

        <!-- Enable the proxy settings only if you use a proxy -->

        <prop key="domibus.proxy.enabled">false</prop>
        <prop key="domibus.proxy.http.host"></prop>
        <prop key="domibus.proxy.http.port"></prop>
        <prop key="domibus.proxy.user"></prop>
        <prop key="domibus.proxy.password"></prop>
        <prop key="domibus.proxy.nonProxyHosts"></prop>

        <prop key="domibus.auth.unsecureLoginAllowed">true</prop>

    </util:properties>

    <!-- Mime-Types listed in this map will not be compressed (in outgoing messages) even if compression is turned on for the given message. -->
    <util:list id="compressionBlacklist" value-type="java.lang.String">
        <value>application/vnd.etsi.asic-s+zip</value>
        <value>image/jpeg</value>
    </util:list>

    <!-- message sender that is being executed by the senderworker -->
    <!--    <bean id="messageSender" class="eu.domibus.ebms3.sender.MessageSender"/>-->

    <!-- quartz job for the retry  -->
    <bean id="retryWorkerJob"
          class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="eu.domibus.ebms3.sender.SendRetryWorker"/>
        <property name="durability" value="true"/>
    </bean>

    <bean id="retryWorkerTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="retryWorkerJob"/>
        <property name="cronExpression" value="${domibus.msh.retry.cron}"/>
    </bean>

    <bean id="pullRequestJob"
          class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="eu.domibus.ebms3.puller.MessagePullerJob"/>
        <property name="durability" value="true"/>
    </bean>

    <bean id="pullRequestTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="pullRequestJob"/>
        <property name="cronExpression" value="${domibus.msh.pull.cron}"/>
    </bean>

    <bean id="activateSuspendedUsersJob"
          class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="eu.domibus.security.ActivateSuspendedUsersJob"/>
        <property name="durability" value="true"/>
    </bean>

    <bean id="activateSuspendedUserTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="activateSuspendedUsersJob"/>
        <property name="cronExpression" value="${domibus.account.unlock.cron}"/>
    </bean>

    <bean id="saveCertificateAndLogRevocationJob"
          class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="eu.domibus.core.certificate.SaveCertificateAndLogRevocationJob"/>
        <property name="durability" value="true"/>
    </bean>

    <bean id="saveCertificateAndLogRevocationTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="saveCertificateAndLogRevocationJob"/>
        <property name="cronExpression" value="${domibus.certificate.check.cron}"/>
    </bean>

    <!-- customizable list of triggers to be executed by quartz -->
    <bean id="userdefinedTriggerList"
          class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <ref bean="retryWorkerTrigger"/>
                <ref bean="pullRequestTrigger"/>
                <ref bean="activateSuspendedUserTrigger"/>
                <ref bean="saveCertificateAndLogRevocationTrigger"/>
            </list>
        </property>
    </bean>


</beans>